name: tag-rc
on:
  push:
    branches:
      - main

# Declare default permissions as read only.
permissions: read-all

concurrency: ${{ github.workflow }}-${{ github.ref }}


jobs:
  release:
    permissions:
      contents: write
      id-token: write
      actions: write
      pull-requests: write
    runs-on: ubuntu-22.04
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@eb238b55efaa70779f274895e782ed17c84f2895 # v2.6.1
        with:
          egress-policy: audit

      - name: Checkout Repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v3.6.0
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Prepare pre-requisites
        uses: ./.github/actions/prepare

      - name: Create Release Pull Request
        uses: changesets/action@f13b1baaa620fde937751f5d2c3572b9da32af23 # v1.4.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # # Deterministic Build & tests
  # provenance:
  #   permissions:
  #     id-token: write
  #     contents: read
  #     actions: read
  #   needs: prepare
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/builder_nodejs_slsa3.yml@v1.7.0
  #   with:
  #     run-scripts: "install-deps, style, nx-build-skip-cache, nx-test-skip-cache"
  #     node-version: "16.20.0"
  #     # Remove after making repo public
  #     rekor-log-public: true


  # # Git tag the commit for publishing
  # tag:
  #   name: Tag RC candidate for all packages
  #   permissions:
  #     id-token: write
  #     contents: write
  #     actions: read
  #   runs-on: ubuntu-22.04
  #   needs: provenance
  #   outputs:
  #     next_rc_version: ${{ steps.update_version.outputs.next_rc_version }}
  #     changed_packages: ${{ steps.tag_check_changes.outputs.changed_packages }}
  #   steps:
  #     - name: Harden Runner
  #       uses: step-security/harden-runner@eb238b55efaa70779f274895e782ed17c84f2895 # v2.6.1
  #       with:
  #         egress-policy: audit

  #     - name: Checkout
  #       uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v3.6.0
  #       with:
  #         token: ${{ secrets.SAI_PAT }}

  #     # For signing commits & Tags
  #     - name: Import GPG key
  #       uses: crazy-max/ghaction-import-gpg@72b6676b71ab476b77e676928516f6982eef7a41 # v5.3.0
  #       with:
  #         gpg_private_key: ${{ secrets.SVC_GPG_KEY }}
  #         passphrase: ${{ secrets.SVC_GPG_PASSPHRASE }}
  #         git_config_global: true
  #         git_tag_gpgsign: true
  #         git_user_signingkey: true
  #         git_commit_gpgsign: true


  #     - name: Get latest git tag and verify package changes
  #       id: tag_check_changes
  #       run: |
  #         git fetch --prune --unshallow --tags
  #         latest_tag=$(git describe --tags --abbrev=0 --match "v*")
  #         echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
  #         changed_packages=$(lerna changed --json | jq -r 'length')
  #         echo "changed_packages=${changed_packages:-0}" >> $GITHUB_OUTPUT

  #     - name: Update RC candidate version ( excluding deploy client )
  #       if: steps.tag_check_changes.outputs.changed_packages > 0
  #       run: |
  #         if [[ ${{ steps.tag_check_changes.outputs.latest_tag }} != *"rc"* ]]; then
  #           yarn versionup:preminor && ./hack/cross-dependency.sh
  #         else
  #           yarn versionup:prerelease && ./hack/cross-dependency.sh
  #         fi

  #     - name: Commit changes
  #       if: steps.tag_check_changes.outputs.changed_packages > 0
  #       id: update_version
  #       run: |
  #         TAG_NAME=$(node -p "require('./lerna.json').version")
  #         git add .
  #         git commit -m "Update version to v$TAG_NAME"
  #         echo "next_rc_version=v$TAG_NAME" >> $GITHUB_OUTPUT

  #     - name: Create Tag
  #       if: steps.tag_check_changes.outputs.changed_packages > 0
  #       run: |
  #         git tag -a ${{ steps.update_version.outputs.next_rc_version }} -m "${{ steps.update_version.outputs.next_rc_version }}"
  #         git push origin ${{ steps.update_version.outputs.next_rc_version }}
  #         git push origin main

  # create-release:
  #   permissions:
  #     contents: write
  #   name: Create Release
  #   needs: tag
  #   if: needs.tag.outputs.changed_packages > 0
  #   uses: ./.github/workflows/release.yml
  #   with:
  #     tag: ${{ needs.tag.outputs.next_rc_version }}
  #     prerelease: true
